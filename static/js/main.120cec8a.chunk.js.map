{"version":3,"sources":["components/Statistics.js","components/FeedbackOptions.js","components/Section.js","components/Notification.js","App.js","index.js"],"names":["Statistics","good","neutral","bad","total","positivePercentage","FeedbackOptions","options","onLeaveFeedback","getBtnName","ev","target","name","Object","keys","map","el","onClick","key","Section","title","children","NotificationMessage","message","state","App","sendFeedback","setState","prevState","countTotalFeedback","values","reduce","acc","countPositiveFeedbackPercentage","positiveFeedback","Math","floor","this","Notification","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4MAgBeA,EAdI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,6BACE,0CAEA,oCAAUJ,GACV,uCAAaC,GACb,mCAASC,GACT,qCAAWC,GACX,iDAAuBC,KCOdC,EAhBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAC5BC,EAAa,SAAAC,GACjBF,EAAgBE,EAAGC,OAAOC,OAG5B,OACE,6BACGC,OAAOC,KAAKP,GAASQ,KAAI,SAAAC,GAAE,OAC1B,4BAAQC,QAASR,EAAYS,IAAKF,EAAIJ,KAAMI,GACzCA,QCAIG,EATC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,iCACE,4BAAKD,GACJC,ICAQC,EAJa,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC7B,OAAO,2BAAIA,ICGPC,EAAQ,CACZvB,KAAM,EACNC,QAAS,EACTC,IAAK,GAGcsB,E,4MACnBD,M,eAAaA,G,EAEbE,aAAe,SAAAd,GACb,EAAKe,UAAS,SAAAC,GACZ,OAAO,eAAGhB,EAAOgB,EAAUhB,GAAQ,O,EAIvCiB,mBAAqB,WACnB,OAAOhB,OAAOiB,OAAO,EAAKN,OAAOO,QAAO,SAACC,EAAKhB,GAAN,OAAagB,EAAMhB,IAAI,I,EAGjEiB,gCAAkC,WAChC,IAAMC,EAAmB,EAAKV,MAAMvB,KAAO,EAAKuB,MAAMtB,QAItD,OAHgBiC,KAAKC,MACC,IAAnBF,EAA0B,EAAKL,sBAEjB,K,uDAIjB,OACE,oCACE,kBAAC,EAAD,CAAST,MAAM,yBACb,kBAAC,EAAD,CACEb,QAASiB,EACThB,gBAAiB6B,KAAKX,eAEvBW,KAAKR,qBACJ,kBAAC,EAAD,CACE5B,KAAMoC,KAAKb,MAAMvB,KACjBC,QAASmC,KAAKb,MAAMtB,QACpBC,IAAKkC,KAAKb,MAAMrB,IAChBC,MAAOiC,KAAKR,qBACZxB,mBAAoBgC,KAAKJ,oCAG3B,kBAACK,EAAD,CAAcf,QAAQ,4B,GAtCDgB,a,MCPjCC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.120cec8a.chunk.js","sourcesContent":["import React from 'react';\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\n  return (\n    <div>\n      <h2>Statistics</h2>\n\n      <p>Good: {good}</p>\n      <p>Neutral: {neutral}</p>\n      <p>Bad: {bad}</p>\n      <p>Total: {total}</p>\n      <p>Positive feedback: {positivePercentage}</p>\n    </div>\n  );\n};\n\nexport default Statistics;\n","import React from 'react';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  const getBtnName = ev => {\n    onLeaveFeedback(ev.target.name);\n  };\n\n  return (\n    <div>\n      {Object.keys(options).map(el => (\n        <button onClick={getBtnName} key={el} name={el}>\n          {el}\n        </button>\n      ))}\n    </div>\n  );\n};\n\nexport default FeedbackOptions;\n","import React from 'react';\n\nconst Section = ({ title, children }) => {\n  return (\n    <section>\n      <h2>{title}</h2>\n      {children}\n    </section>\n  );\n};\n\nexport default Section;\n","import React from 'react';\n\nconst NotificationMessage = ({ message }) => {\n  return <p>{message}</p>;\n};\n\nexport default NotificationMessage;\n","import React, { Component } from 'react';\nimport Statistics from './components/Statistics';\nimport FeedbackOptions from './components/FeedbackOptions';\nimport Section from './components/Section';\nimport Notification from './components/Notification';\n\nconst state = {\n  good: 0,\n  neutral: 0,\n  bad: 0,\n};\n\nexport default class App extends Component {\n  state = { ...state };\n\n  sendFeedback = name => {\n    this.setState(prevState => {\n      return { [name]: prevState[name] + 1 };\n    });\n  };\n\n  countTotalFeedback = () => {\n    return Object.values(this.state).reduce((acc, el) => acc + el, 0);\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const positiveFeedback = this.state.good + this.state.neutral;\n    const percent = Math.floor(\n      (positiveFeedback * 100) / this.countTotalFeedback(),\n    );\n    return percent + '%';\n  };\n\n  render() {\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={state}\n            onLeaveFeedback={this.sendFeedback}\n          ></FeedbackOptions>\n          {this.countTotalFeedback() ? (\n            <Statistics\n              good={this.state.good}\n              neutral={this.state.neutral}\n              bad={this.state.bad}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            ></Statistics>\n          ) : (\n            <Notification message=\"No feedback given\"></Notification>\n          )}\n        </Section>\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}